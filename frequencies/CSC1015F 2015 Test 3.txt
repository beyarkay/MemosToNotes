function : 11
return : 10
2 : 6
recursive : 6
code : 5
1 : 5
# : 5
value : 5
[1] : 4
For : 4
module : 4
Python3 : 4
array : 4
marks : 3
test : 3
Question : 3
#2 : 3
#1 : 3
This : 3
returns : 3
(c) : 3
following : 3
n==1 : 2
below: : 2
questions. : 2
English, : 2
Threshold(arr2D,cutoff): : 2
someData : 2
list : 2
range(len(arr2D)): : 2
range(len(arr2D[i])): : 2
j : 2
(a) : 2
briefly, : 2
[8] : 2
items : 2
Computer : 2
cutoff : 2
FiboRec(n): : 2
1, : 2
listed : 2
Science : 2
Q2.py : 2
def : 2
must : 2
Examine : 2
example : 2
~~ : 2
MystRec(n)?[1] : 2
happens, : 2
end : 2
write : 2
answer : 2
does. : 2
user : 2
** : 2
clear : 2
Module : 2
returned, : 1
number. : 1
two-dimensional : 1
less : 1
- : 1
Explain : 1
What : 1
[1, : 1
puzzle(keys,data): : 1
Department : 1
contains: : 1
(in : 1
row : 1
detach : 1
Q1module. : 1
iii.CourseMarks['AST1000F'][1] : 1
module. : 1
[6] : 1
0 : 1
MystRec(n): : 1
>>>Threshold( : 1
2015 : 1
Now : 1
example, : 1
count : 1
'AST1000F':[88,78,67,85], : 1
puzzle(keys,data) : 1
i.vals.index(2)[1] : 1
solution. : 1
dictionary[1], : 1
[0, : 1
number : 1
67, : 1
arr2D : 1
Cape : 1
below, : 1
exact : 1
'BIO1004F'] : 1
arr2D[i][j]==key: : 1
runs : 1
MystRec(n-1)*2 : 1
amrk : 1
arr2D[i][j]>cutoff: : 1
occurs : 1
Threshold(arr2D,cutoff), : 1
output : 1
10961015Marks : 1
w=MystRec(3)x=MystRec(0)y=MystRec(8)z=MystRec(MystRec(2))print(w)print(x)print(y)print(z)7 : 1
row: : 1
interpreter: : 1
1]i.loc2D(someData,25)[2] : 1
30]]Complete : 1
From : 1
[](b)Describe : 1
Test : 1
[20] : 1
(non- : 1
interpreter. : 1
examples : 1
(d)Write : 1
specified : 1
[]def : 1
'MAM1000W':[35,55,67,90], : 1
else: : 1
[30] : 1
imported : 1
3} : 1
supplied : 1
keys : 1
3 : 1
[2] : 1
12345678Max : 1
0. : 1
Class : 1
Q1.pysomeData=[[10,20,30],[1,2],[10,20,40,50],[10,100]]vals=[2,10,100]CourseMarks={'CSC1015F':[50,78,34,50], : 1
Town : 1
replaced : 1
dictionary : 1
A!!!!!!!!!0B!!!!!!!!!1C!!!!!!!!!2D!!!!!!!!!3E!!!!!!!!!4F!!!!!!!!!5G!!!!!!!!!6H!!!!!!!!!7I!!!!!!!!!8J!!!!!!!!!9K!!!!!!L!!!!!!M!!!!!!N!!!!!!O!!!!!!P!!!!!!Q!!!!!!R!!!!!!S!!!!!!T!!!!!!U!!!!!!V!!!!!!W!!!!!!X!!!!!!Y!!!!!!Z!!!!!!Question : 1
University : 1
error : 1
Dictionaries : 1
10: : 1
85]iv. : 1
step : 1
base : 1
2viii. : 1
key : 1
n==0: : 1
occurs. : 1
MystRec(n) : 1
iii.A : 1
[20, : 1
[1]and : 1
nth : 1
iterative : 1
equal : 1
times : 1
Solutions : 1
CourseMarks : 1
i.A : 1
count[a]=count[a]+1 : 1
ii.A : 1
dimensional : 1
vals : 1
count={} : 1
[[100,4],[20,500]], : 1
4Question : 1
0!!!!!!!!!!!!!!!!1!!!!!!!!!!!!!!!!2!!!!!!!!!!!!!!!!3!!!!!!!!!!!!!!!!4!!!!!!!!!!!!!!!!5!!!!!!!!!!!!!!!!6!!!!!!!!!!!!!!!!7!!!!!!!!!!!!!!!!8!!!!!!!!!!!!!!!!9!!!!!!!!!!!!!!!!Marker : 1
['MAM1000W', : 1
given : 1
two- : 1
val : 1
FiboRec(n) : 1
4vii. : 1
indicate : 1
1015F : 1
statement : 1
Recursion : 1
n<=0: : 1
Q2>>>Q2.MystRec(-2).[2] : 1
puzzle(vals,someData)[2] : 1
Errorv.len(vals)[1] : 1
n==2: : 1
'BIO1004F':[67,68,60,65]}def : 1
len(someData[1])[1] : 1
Q2.pydef : 1
case : 1
Q1.py : 1
CourseMarks[50][1] : 1
[i,j] : 1
'CSC1015F', : 1
1]x.loc2D(someData,20)[2] : 1
{2: : 1
count[a]=0 : 1
values : 1
Fibonacci : 1
[3] : 1
len(CourseMarks)[1] : 1
(d) : 1
5recursive) : 1
give : 1
sheet. : 1
Write : 1
numbers : 1
'! : 1
FiboRec(n-1)+FiboRec(n-2) : 1
(d)What : 1
>>>FiboRec(0)0>>>FiboRec(1)1>>>FiboRec(2)1>>>FiboRec(3)2>>>FiboRec(4)3Complete : 1
clearly : 1
returned : 1
6Code : 1
[88, : 1
interpreter): : 1
30)[[30, : 1
4], : 1
len(someData)[1] : 1
'AST1000F', : 1
call: : 1
. : 1
module, : 1
data: : 1
new : 1
zero, : 1
(e) : 1
100: : 1
>>>import : 1
may : 1
3vi. : 1
Arrays : 1
(b)Write : 1
78, : 1
keys: : 1
3def : 1
variable : 1
arr2D[i][j]=cutoff : 1
types : 1
4ix. : 1
2D : 1
' : 1
calls : 1
Describe : 1
(b)Assume : 1
oii.CourseMarks.keys()[1] : 1
function, : 1
mark : 1
loc2D(arr2D,key): : 1
i==a: : 1
loc2D(someData,2)[2] : 1
